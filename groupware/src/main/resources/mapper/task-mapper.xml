<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.samjo.app.project.mapper.ProjectMapper">
	<!-- 프로젝트업무(하위), 협력업체 -->

	<!-- 프로젝트(하위) 업무 전체 조회 -->
	<select id="selectTaskAllList" resultType="ProjectVO"
		parameterType="SearchVO">
		SELECT r.*
				FROM (SELECT rownum rn,
						t.*
						FROM (SELECT t.task_no, 
									p.prjt_name, 
									t.task_name, 
									t.task_start_dt, 
									t.task_due_dt, 
									t.task_type, 	
									t.prjt_mat, 
									(SELECT COUNT(*)
										FROM task_emps te
										WHERE te.task_no = t.task_no) AS participants_cnt,
									(SELECT
										CASE
										WHEN COUNT(*) = 0 THEN 0
										ELSE TRUNC(SUM(CASE WHEN te.cmplt= '5F1f' THEN 1 ELSE 0 END) * 100.0 /COUNT(*))
										END
									FROM task_emps te
									WHERE te.task_no = t.task_no) AS progress
								FROM task_common t JOIN prjt p 
											ON (p.prjt_id = t.standard_no)
				<where>
					<if test="keyword != null and keyword != ''">
						AND ${searchCondition} LIKE '%' || #{keyword} || '%'
					</if>
					<if test="taskType != null and taskType != ''">
						AND t.task_type LIKE #{taskType}
					</if>
					<if test="prjtMat != null and prjtMat != ''">
						AND t.prjt_mat LIKE #{prjtMat}
					</if>
				<choose>
					<when test="taskStart != null and taskDue != null">
						AND t.task_start_dt <![CDATA[>=]]> #{taskStart}  AND t.task_due_dt <![CDATA[<=]]> #{taskDue}
					</when>
					<when test="(taskStart != null) and (taskDue == null)">
						AND t.task_start_dt >= #{taskStart}
					</when>
					<when test="(taskDue != null) and (taskStart == null)">
						AND t.task_due_dt <![CDATA[<=]]> #{taskDue}
					</when>
				</choose>
				</where>
				ORDER BY ${taskSort},task_no) t 
			WHERE rownum <![CDATA[<=]]> (#{page} * 10)) r
		WHERE r.rn > (#{page} -1) * 10
  	</select>

	<!-- 프로젝트(하위) 업무 페이징 -->
	<select id="taskCount" parameterType="SearchVO">
		SELECT COUNT(*)
		FROM task_common t JOIN prjt p
							 ON (p.prjt_id = t.standard_no)
		<where>
			<!-- 각 검색 조건에 대한 동적 추가 -->
			<if test="keyword != null and keyword != ''">
				AND ${searchCondition} LIKE '%' || #{keyword} || '%'
			</if>
			<if test="taskType != null and taskType != ''">
				AND t.task_type LIKE #{taskType}
			</if>
			<if test="prjtMat != null and prjtMat != ''">
				AND t.prjt_mat LIKE #{prjtMat}
		</if>
		<choose>
				<when test="taskStart != null and taskDue != null">
					AND t.task_start_dt <![CDATA[>=]]> #{taskStart}  AND t.task_due_dt <![CDATA[<=]]> #{taskDue}
				</when>
				<when test="(taskStart != null) and (taskDue == null)">
					AND t.task_start_dt >= #{taskStart}
				</when>
				<when test="(taskDue != null) and (taskStart == null)">
					AND t.task_due_dt <![CDATA[<=]]> #{taskDue}
				</when>
		</choose>
		</where>
	</select>

	<!-- 프로젝트(하위) 단건 -->
	<select id="selectTask" resultType="ProjectVO">
		SELECT p.prjt_id
				,p.prjt_name
				,p.prjt_stat
				,e.dept_name
				,t.task_start_dt
				,t.task_due_dt
				,t.task_no
				,m.emp_name
				,p.purpose
				,p.smry
		FROM task_common t JOIN task_emps e
							ON t.task_no = e.task_no
						JOIN prjt p
							ON p.prjt_id = t.standard_no
						JOIN emp m
							ON m.emp_id = p.resp_mngr_id
		WHERE t.task_no = #{taskNo}
	</select>
	<!-- 프로젝트(하위) 업무 등록 -->
	<insert id="insertTask" parameterType="ProjectVO">
		<selectKey keyProperty="pj.taskNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(task_no),0) +1
			FROM task_common
		</selectKey>
		INSERT ALL
		INTO task_common(
							task_no,
							task_name,
							task_purpose,
							task_cntn,
							task_start_dt,
							task_due_dt,
							task_type,
							standard_no,
							prjt_mat,
							dept_id,
							cust_no )
			VALUES (
					#{pj.taskNo},
					#{pj.taskName},
					#{pj.taskPurpose},
					#{pj.taskCntn},
					#{pj.taskStartDt},
					#{pj.taskDueDt},
					#{pj.taskType},
					#{pj.standardNo},
					#{pj.prjtMat},
					#{pj.deptId},
					#{pj.custNo}
			)
		<foreach collection="pj.taskEmps" item="te">
			INTO task_emps (
								task_no,
								task_emp_id,
								dept_id,
								dept_name,
								cust_no )
			VALUES (
					#{pj.taskNo},
					#{te.taskEmpId},
					#{te.deptId},
					#{te.deptName},
					#{pj.custNo})
		</foreach>
		select 1 from dual
	</insert>
	<!-- 프로젝트(하위) 업무 수정 -->



	<!-- 프로젝트(하위) 업무 삭제 -->
	<delete id="deleteTask" parameterType="int">
		DELETE FROM task_common
		WHERE task_no = #{taskNo}
	</delete>


	<!-- 협력업체 전체 조회 -->
	<select id="selectCoopCoAllList" resultType="ProjectVO">

		SELECT   coop_co_no
				,task_no
				,co_name
				,co_tel
				,pic
				,cust_addr
				,cntn
		FROM    coop_co
		ORDER BY coop_co_no
	</select>

	<!-- 협력업체 등록 -->
	<insert id="insertCoop" parameterType="ProjectVO">
		<selectKey keyProperty="coopCoNo" order="BEFORE"
			resultType="Integer">
			SELECT NVL(MAX(coop_co_no),0) +1
			FROM coop_co
		</selectKey>
		INSERT INTO coop_co (coop_co_no
							,co_name
							,co_tel
							,pic
							,cust_addr
							,cntn)
		VALUES ( #{coopCoNo}
				,#{coName}
				,#{coTel}
				,#{pic}
				,#{custAddr}
				,#{cntn} )
	</insert>

	<!-- 협력업체 단건 -->
	<select id="selectCoop" resultType="ProjectVO">
		SELECT coop_co_no
						,task_no
						,co_name
						,co_tel
						,pic
						,cust_addr
						,cntn
		FROM coop_co
		WHERE coop_co_no = #{coopCoNo}
	</select>

	<!-- 협력업체 수정 -->
	<update id="updateCoop" parameterType="ProjectVO">
		UPDATE coop_co
		SET
		<if test="coName != null and !coName.equals('')">
			co_name = #{coName}
		</if>
		<if test="coTel != null and !coTel.equals('')">
			, co_tel = #{coTel}
		</if>
		<if test="pic != null and !pic.equals('')">
			, pic = #{pic}
		</if>
		<if test="custAddr != null and !custAddr.equals('')">
			, cust_addr = #{custAddr}
		</if>
		<if test="cntn != null and !cntn.equals('')">
			, cntn = #{cntn}
		</if>
		WHERE coop_co_no =#{coopCoNo}
	</update>

	<!-- 협력업체 삭제 -->
	<delete id="deleteCoop" parameterType="int">
		DELETE FROM coop_co
		WHERE coop_co_no = #{coopCoNo}
	</delete>

</mapper>