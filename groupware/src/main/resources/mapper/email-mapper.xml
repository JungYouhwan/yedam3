<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.samjo.app.email.mapper.EmailMapper">
 	<select id="selectInboxAll" resultType="EmailVO"> <!-- RESULTTYPE 2개 있어도 되나..? -->
  		SELECT  RN
  		       ,REC_EMAIL_NO
               ,SEN_EMAIL_NO
               ,RECP
               ,REFER
               ,READ_DT
               ,EMAIL_STAT
               ,CUST_NO
        FROM   (SELECT /*+ INDEX(INBOX inbox_rec_email_no_pk) */
        		       ROWNUM RN,
        		       INBOX.*
        		FROM   INBOX
        		WHERE  ROWNUM <![CDATA[<=]]> (#{page} * 5)) a
        		AND    RECP = #{empId}) <!-- 이 조건이 여기 붙는게 맞나?.. -->
        WHERE a.rn > (#{page} - 1) * 5 <!-- 추후 로그인 구현되면 테스트 해 보기. -->
  	</select>

  	<insert id="insertEmail" parameterType="EmailVO">
  		<selectKey keyProperty="senEmailNo"
  				   resultType="Integer"
  				   order="BEFORE">
  			SELECT NVL(MAX(sen_email_no),0) + 1
  			FROM email	   
  		</selectKey> 
  		<!-- 화면에서 넘겨받은 EmailVO 객체 내부의 필드들을 두 테이블에 나눠 담는 쿼리 -->
  		<!-- 프로시저 CALL 하는 쿼리 집어넣기( 0517 오후 고민 중..) -->
  		
  	</insert>
  	
  	<select id="count">
  		SELECT count(*)
  		FROM INBOX
  	</select>
  	
  	<select id="selectEmailAll" resultType="EmailVO">
  		SELECT SEN_EMAIL_NO
              ,SENDER
              ,TITLE
              ,CNTN
              ,SENT_DT
              ,EMAIL_STAT
              ,CHAIN_MAIL_NO
              ,CUST_NO
        FROM EMAIL
        <!--  WHERE RECP = #{empId} -->
  	</select>
  	
  	 <select id="countSend">
  		SELECT count(*)
  		FROM EMAIL
  	</select>
  	
  	<!-- 휴지통 -->
  	<update id="goWaste">
	  	UPDATE email
		SET email_stat = '3B2b'
		WHERE sen_email_no = #{senEmailNo}<!-- 선택한 메일의 번호..파라미터로 넘어오는. -->
  	</update>
  	
  	 <select id="countWasted">
  		SELECT count(*)
  		FROM   EMAIL
  		WHERE  email_stat = '3B2b'
  	</select>

	<select id="wastedList" resultType="EmailVO" parameterType="EmpVO">
  	SELECT s.sender
      	  ,s.title
          ,s.sent_dt
    FROM  email s JOIN inbox i
          ON s.sen_email_no = i.sen_email_no
    WHERE s.email_stat = '3B2b'
          AND i.email_stat = '3B2b'
          AND s.cust_no = #{custNo}
          AND i.cust_no = #{custNo}
          <!-- 고객사별 분류를 해서 가져와야하므로. 로그인 세션에서 받아온 고객사번과 대조.
          구현되고 나면 테스트 해볼것 -->
	</select>
	
	<update id="restoreMail" parameterType="EmailVO">
	  	UPDATE email
		SET email_stat = '3B1b'
		WHERE sen_email_no = #{senEmailNo}<!-- 선택한 메일의 번호..파라미터로 넘어오는. -->
  	</update>
  	
  	<!-- 주소록 조회. 세션의 id와 같은 고객사에 속하는 사원들의 일부 정보를 가린 채 Select -->
  	<select id="getEmpList" resultType="EmpVO" parameterType="EmpVO">
  	SELECT e.emp_name,
       d.dept_name,
       j.job_title
	FROM emp e JOIN dept d
           ON e.dept_id = d.dept_id
           JOIN jobs j
           ON e.job_no = j.job_no
	WHERE cust_no = #{custNo}
	<!--로그인한 세션의 계정이 속한 고객사에 해당하는 emp, dept, jobs -->
  	</select>
  	
  </mapper>